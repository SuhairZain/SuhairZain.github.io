{"version":3,"sources":["components/HomePage/index.ts","components/HomePage/HomePage.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["HomePage","state","hoverClass","createMouseEventHandlers","hoverClassToUpdate","onMouseOver","setState","onMouseOut","this","className","join","PureComponent","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uTAEeA,G,uNCOXC,MAAe,CACXC,WAAY,I,EAGhBC,yBAA2B,SAACC,GACxB,MAAO,CACHC,YAAa,WACT,EAAKC,SAAS,CACVJ,WAAYE,KAGpBG,WAAY,WACJ,EAAKN,MAAMC,aAAeE,GAI9B,EAAKE,SAAS,CACVJ,WAAY,Q,wEAMlB,IACEA,EAAeM,KAAKP,MAApBC,WAER,OACI,yBAAKO,UAAU,YACX,gCACI,gDAEI,6BACA,0BAAMA,UAAU,WAAhB,iBAIR,yBAAKA,UAAU,SACX,uCACIA,UAAW,CAAC,YAAaP,GAAYQ,KAAK,MACtCF,KAAKL,yBAAyB,mBAClC,yBAAKM,UAAU,QACX,wBAAIA,UAAU,WAAd,cAEJ,0BAAMA,UAAU,eAAhB,qUAUJ,uCACIA,UAAW,CAAC,eAAgBP,GAAYQ,KAAK,MACzCF,KAAKL,yBAAyB,sBAClC,yBAAKM,UAAU,QACX,wBAAIA,UAAU,WAAd,iBAEJ,0BAAMA,UAAU,eAAhB,2N,GA5DDE,kBCORC,E,iLARP,OACI,yBAAKH,UAAU,OACX,kBAAC,EAAD,W,GAJEE,iBCOEE,QACa,cAA7BC,OAAOC,SAASC,UAEiB,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACrB,2DCZZC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDmIzC,kBAAmBC,WACnBA,UAAUC,cAAcC,MACnBC,MAAK,SAACC,GACHA,EAAaC,gBAEhBC,OAAM,SAACC,GACJC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.25b43f71.chunk.js","sourcesContent":["import HomePage from './HomePage';\n\nexport default HomePage;\n","import React, { PureComponent } from 'react';\n\nimport './HomePage.css';\n\ntype State = {\n    hoverClass: 'DeveloperHover' | 'PhotographerHover' | '';\n};\n\nclass HomePage extends PureComponent<{}, State> {\n    state: State = {\n        hoverClass: '',\n    };\n\n    createMouseEventHandlers = (hoverClassToUpdate: State['hoverClass']) => {\n        return {\n            onMouseOver: () => {\n                this.setState({\n                    hoverClass: hoverClassToUpdate,\n                });\n            },\n            onMouseOut: () => {\n                if (this.state.hoverClass !== hoverClassToUpdate) {\n                    return;\n                }\n\n                this.setState({\n                    hoverClass: '',\n                });\n            },\n        };\n    };\n\n    render() {\n        const { hoverClass } = this.state;\n\n        return (\n            <div className=\"HomePage\">\n                <header>\n                    <h2>\n                        Hello, my name is\n                        <br />\n                        <span className=\"Enlarge\">Suhair Zain</span>\n                    </h2>\n                </header>\n\n                <div className=\"Roles\">\n                    <div\n                        className={['Developer', hoverClass].join(' ')}\n                        {...this.createMouseEventHandlers('DeveloperHover')}>\n                        <div className=\"Role\">\n                            <h2 className=\"Enlarge\">developer</h2>\n                        </div>\n                        <span className=\"Explanation\">\n                            A developer with over 6 years of experience\n                            developing mobile apps and websites. Have run my own\n                            startup and worked as a full stack and front-end\n                            developer. Open to learning new languages and\n                            frameworks because you never know where my our\n                            favorite will come from. Looking for new\n                            opportunities to learn and improve self.\n                        </span>\n                    </div>\n                    <div\n                        className={['Photographer', hoverClass].join(' ')}\n                        {...this.createMouseEventHandlers('PhotographerHover')}>\n                        <div className=\"Role\">\n                            <h2 className=\"Enlarge\">photographer</h2>\n                        </div>\n                        <span className=\"Explanation\">\n                            Someone who cannot identify colors, but still love\n                            to bring a smile to someones face by capturing a\n                            tiny chunk of their lives. The title should have\n                            said an amateur photographer, but hey, whoâ€™s\n                            counting?\n                        </span>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default HomePage;\n","import React, { PureComponent } from 'react';\nimport './App.css';\n\nimport HomePage from './components/HomePage';\n\nclass App extends PureComponent {\n    render() {\n        return (\n            <div className=\"App\">\n                <HomePage />\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === '[::1]' ||\n        // 127.0.0.0/8 are considered localhost for IPv4.\n        window.location.hostname.match(\n            /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n        )\n);\n\ntype Config = {\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then((registration) => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch((error) => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: { 'Service-Worker': 'script' },\n    })\n        .then((response) => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (\n                response.status === 404 ||\n                (contentType != null &&\n                    contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then((registration) => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            );\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready\n            .then((registration) => {\n                registration.unregister();\n            })\n            .catch((error) => {\n                console.error(error.message);\n            });\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}